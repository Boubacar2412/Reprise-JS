# üî•¬†D√©fi de codage #7 : Gestion d'un Inventaire de Magasin

**Contexte :**
Vous travaillez sur une application simple de gestion d'inventaire pour un magasin. Vous devez impl√©menter plusieurs fonctionnalit√©s qui permettront d'ajouter des articles √† l'inventaire, de v√©rifier leur disponibilit√©, et de calculer leur prix total en fonction de leur quantit√©.

**Objectifs :**
Dans ce challenge, vous allez combiner les notions de fonctions, tableaux, conditions (if/else ou op√©rateur ternaire), et de coercion/conversion de types en JavaScript.

**Instructions :**

1. **Cr√©er l'inventaire :**

   - Cr√©ez un tableau `inventory` qui contiendra des objets repr√©sentant les articles du magasin. Chaque objet doit avoir les propri√©t√©s suivantes :
     - `name`: Le nom de l'article (string).
     - `price`: Le prix unitaire de l'article (number).
     - `quantity`: La quantit√© de l'article en stock (number).

   **Exemple :**

   ```jsx
   const inventory = [
     { name: "apple", price: 1.2, quantity: 10 },
     { name: "banana", price: 0.8, quantity: 5 },
     { name: "orange", price: 1.5, quantity: 8 },
   ];
   ```

2. **Ajouter un article :**

   - Impl√©mentez une fonction `addItem(name, price, quantity)` qui ajoute un nouvel article √† l'inventaire.
   - V√©rifiez si un article avec le m√™me nom existe d√©j√† dans l'inventaire. Si oui, utilisez un `if/else` pour soit ajouter la quantit√© √† l'article existant, soit afficher un message d'erreur.

   **Exemple :**

   ```jsx
   addItem("apple", 1.2, 5); // Augmente la quantit√© de "apple" √† 15
   addItem("grape", 2.0, 10); // Ajoute "grape" √† l'inventaire
   ```

3. **V√©rifier la disponibilit√© :**

   - Cr√©ez une fonction `checkAvailability(itemName, requestedQuantity)` qui prend en param√®tres le nom d'un article et la quantit√© demand√©e. Cette fonction doit v√©rifier si la quantit√© demand√©e est disponible en stock.
   - Utilisez une condition ternaire pour retourner soit `"Disponible"`, soit `"Stock insuffisant"`.

   **Exemple :**

   ```jsx
   console.log(checkAvailability("banana", 3)); // "Disponible"
   console.log(checkAvailability("banana", 10)); // "Stock insuffisant"
   ```

4. **Calculer le prix total :**

   - Impl√©mentez une fonction `calculateTotalPrice(itemName, requestedQuantity)` qui calcule le prix total pour une quantit√© donn√©e d'un article. Utilisez un `if/else` pour v√©rifier si l'article est disponible en quantit√© suffisante. Si oui, retournez le prix total ; sinon, retournez `"Stock insuffisant"`.

   **Exemple :**

   ```jsx
   console.log(calculateTotalPrice("orange", 3)); // 4.5
   console.log(calculateTotalPrice("orange", 10)); // "Stock insuffisant"
   ```

5. **Conversion et coercion de types :**

   - Modifiez la fonction `calculateTotalPrice` pour accepter √©galement les quantit√©s sous forme de cha√Æne de caract√®res (string). Utilisez la coercion ou la conversion de types pour vous assurer que la quantit√© est trait√©e correctement comme un nombre dans vos calculs.

   **Exemple :**

   ```jsx
   console.log(calculateTotalPrice("banana", "2")); // 1.6
   console.log(calculateTotalPrice("banana", "five")); // "Quantit√© invalide"
   ```

**Bonus :**

- Impl√©mentez une fonction `removeItem(itemName, quantity)` qui retire une certaine quantit√© d'un article de l'inventaire. Si la quantit√© √† retirer est sup√©rieure √† celle disponible, affichez un message d'erreur.

**Crit√®res d'√©valuation :**

- Respect des consignes (cr√©ation des fonctions et respect de la logique demand√©e).
- Bonne utilisation des concepts de tableaux, fonctions, conditions, et coercion/conversion de types.
- Robustesse du code face aux cas d'erreur (par exemple, tentatives d'ajout ou de retrait d'articles non existants ou en quantit√© insuffisante).

Bonne chance √† vos √©tudiants ! Ce challenge les aidera √† consolider leur compr√©hension des bases de JavaScript dans un contexte pratique.
