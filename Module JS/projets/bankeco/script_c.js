'use strict';

// Cr√©ation des comptes utilisateurs
const account1 = {
  owner: 'Jonas Schmedtmann',
  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],
  interestRate: 1.2, // %
  pin: 1111,
};

const account2 = {
  owner: 'Jessica Davis',
  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
  interestRate: 1.5,
  pin: 2222,
};

const account3 = {
  owner: 'Steven Thomas Williams',
  movements: [200, -200, 340, -300, -20, 50, 400, -460],
  interestRate: 0.7,
  pin: 3333,
};

const account4 = {
  owner: 'Sarah Smith',
  movements: [430, 1000, 700, 50, 90],
  interestRate: 1.0,
  pin: 4444,
};

// Tableau contenant tous les comptes
const accounts = [account1, account2, account3, account4];

// S√©lection des √©l√©ments du DOM
// Elements
const labelWelcome = document.querySelector('.welcome');
const labelDate = document.querySelector('.date');
const labelBalance = document.querySelector('.balance__value');
const labelSumIn = document.querySelector('.summary__value--in');
const labelSumOut = document.querySelector('.summary__value--out');
const labelSumInterest = document.querySelector('.summary__value--interest');
const labelTimer = document.querySelector('.timer');

const containerApp = document.querySelector('.app');
const containerMovements = document.querySelector('.movements');

const btnLogin = document.querySelector('.login__btn');
const btnTransfer = document.querySelector('.form__btn--transfer');
const btnLoan = document.querySelector('.form__btn--loan');
const btnClose = document.querySelector('.form__btn--close');
const btnSort = document.querySelector('.btn--sort');

const inputLoginUsername = document.querySelector('.login__input--user');
const inputLoginPin = document.querySelector('.login__input--pin');
const inputTransferTo = document.querySelector('.form__input--to');
const inputTransferAmount = document.querySelector('.form__input--amount');
const inputLoanAmount = document.querySelector('.form__input--loan-amount');
const inputCloseUsername = document.querySelector('.form__input--user');
const inputClosePin = document.querySelector('.form__input--pin');

let currentAccount;

// üñ±Ô∏è Gestionnaire d'√©v√©nements pour la connexion
btnLogin.addEventListener('click', function (e) {
  e.preventDefault();

  // Trouver l'utilisateur dans le tableau des comptes
  currentAccount = accounts.find(
    acc => acc.owner.toLowerCase() === inputLoginUsername.value.toLowerCase()
  );

  // V√©rifier si le code PIN correspond
  if (currentAccount?.pin === Number(inputLoginPin.value)) {
    // Afficher un message de bienvenue
    labelWelcome.textContent = `Bienvenue, ${
      currentAccount.owner.split(' ')[0]
    }`;

    // R√©initialiser les champs de saisie
    inputLoginUsername.value = inputLoginPin.value = '';
    inputLoginPin.blur();

    // Afficher les mouvements (Phase 2)
    displayMovements(currentAccount.movements, currentAccount.mouvementsDates);

    // Calculer et afficher le solde (Phase 3)
    calcDisplayBalance(currentAccount);

    // Calculer et afficher le r√©sum√© des transactions (Phase 3)
    calcDisplaySummary(currentAccount);
  } else {
    labelWelcome.textContent = 'Nom d‚Äôutilisateur ou PIN incorrect';
  }
});

// üñ±Ô∏è Gestionnaire d'√©v√©nements pour le transfert d'argent
btnTransfer.addEventListener('click', function (e) {
  e.preventDefault(); // Emp√™che la soumission du formulaire

  // R√©cup√©rer le montant et le destinataire
  const amount = Number(inputTransferAmount.value);
  const receiverAcc = accounts.find(acc => acc.owner === inputTransferTo.value);

  // R√©initialiser les champs du formulaire apr√®s saisie
  inputTransferAmount.value = inputTransferTo.value = '';

  // V√©rification des conditions de transfert
  if (
    amount > 0 && // Le montant doit √™tre sup√©rieur √† 0
    receiverAcc && // Le destinataire doit exister
    currentAccount.balance >= amount && // L'utilisateur doit avoir assez de fonds
    receiverAcc?.owner !== currentAccount.owner // Ne pas transf√©rer √† soi-m√™me
  ) {
    const now = new Date(); // retourn la date actuelle

    // Ajouter un mouvement n√©gatif √† l'utilisateur (exp√©diteur)
    currentAccount.movements.push(-amount);
    currentAccount.mouvementsDates.push(now);

    // Ajouter un mouvement positif au destinataire
    receiverAcc.movements.push(amount);
    receiverAcc.mouvementsDates.push(now);

    // Mettre √† jour l'interface de l'utilisateur
    displayMovements(currentAccount.movements, currentAccount.mouvementsDates);
    calcDisplayBalance(currentAccount);
    calcDisplaySummary(currentAccount);

    // (Optionnel) Afficher un message de confirmation
    alert('Transfert r√©ussi !');
  } else {
    // Si une condition √©choue, afficher un message d'erreur
    alert('Transfert √©chou√©. V√©rifiez votre solde ou le destinataire.');
  }
});

// üñ±Ô∏è Gestionnaire d'√©v√©nements pour la demande de pr√™t
btnLoan.addEventListener('click', function (e) {
  e.preventDefault(); // Emp√™che la soumission du formulaire

  const amount = Number(inputLoanAmount.value);
  if (!isNaN(amount)) {
    console.log(`Le montant est un nombre valide: ${amount}`);
  } else {
    console.log('Erreur: Montant non valide');
  }

  const roundedAmount = Math.round(amount * 100) / 100; // Arrondir a deux decimales
  console.log(`Montant arrondi : ${roundedAmount}`);

  // R√©initialiser le champ apr√®s soumission
  inputLoanAmount.value = '';

  // V√©rification : l'utilisateur doit avoir un d√©p√¥t d'au moins 10 % du montant demand√©
  if (
    roundedAmount > 0 &&
    currentAccount.movements.some(mov => mov >= roundedAmount * 0.1)
  ) {
    const now = new Date();
    // Ajouter le montant du pr√™t aux mouvements de l'utilisateur
    currentAccount.movements.push(roundedAmount);
    currentAccount.mouvementsDates.push(now);

    // Mettre √† jour les mouvements, le solde et le r√©sum√©
    displayMovements(currentAccount.movements, currentAccount.mouvementsDates);
    calcDisplayBalance(currentAccount);
    calcDisplaySummary(currentAccount);

    // Message de confirmation
    alert('Pr√™t accord√© !');
  } else {
    // Message d'erreur en cas d'√©chec
    alert(
      'Demande de pr√™t refus√©e. Vous devez avoir un d√©p√¥t d‚Äôau moins 10 % du montant demand√©.'
    );
  }
});

// üñ±Ô∏è Gestionnaire d'√©v√©nements pour la cl√¥ture de compte
btnClose.addEventListener('click', function (e) {
  e.preventDefault(); // Emp√™che la soumission du formulaire

  // V√©rifier que le nom d'utilisateur et le PIN sont corrects
  if (
    inputCloseUsername.value === currentAccount.owner &&
    Number(inputClosePin.value) === currentAccount.pin
  ) {
    const index = accounts.findIndex(acc => acc.owner === currentAccount.owner);

    // Supprimer le compte de la liste
    accounts.splice(index, 1);

    // Masquer l'interface utilisateur (d√©connexion)
    containerApp.style.opacity = 0;

    // R√©initialiser les champs du formulaire
    inputCloseUsername.value = inputClosePin.value = '';

    // Afficher un message de confirmation
    alert('Votre compte a √©t√© supprim√© avec succ√®s.');
  } else {
    // Si les informations sont incorrectes, afficher un message d'erreur
    alert('Nom d‚Äôutilisateur ou code PIN incorrect.');
  }
});

// R√©initialiser le timer √† chaque interaction
const resetTimer = function () {
  if (timer) clearInterval(timer); // Effacer le timer existant
  startLogoutTimer(); // Red√©marrer le timer
};

//  √âv√©nements √† surveiller pour r√©initialiser le timer
containerApp.addEventListener('click', resetTimer);
containerApp.addEventListener('mousemove', resetTimer);
containerApp.addEventListener('keydown', resetTimer);

//  D√©marrer le timer au moment de la connexion
btnLogin.addEventListener('click', function (e) {
  e.preventDefault();

  if (currentAccount?.pin === Number(inputLoginPin.value)) {
    startLogoutTimer(); // D√©marrer le timer pour la d√©connexion automatique
  }
});

// Fonction pour afficher les mouvements
const displayMovements = function (movements, dates = [], sort = false) {
  // Vider le conteneur avant d'afficher les nouveaux mouvements
  containerMovements.innerHTML = '';

  // Si le tri est activ√©, trier les mouvements par montant
  const movs = sort ? movements.slice().sort((a, b) => a - b) : movements;

  // Parcourir chaque mouvement et l'afficher
  movs.forEach(function (mov, i) {
    const type = mov > 0 ? 'd√©p√¥t' : 'retrait';
    const date = dates[i] ? new Date(dates[i]) : new Date();

    const displayDate = `${date.getDate()}/${
      date.getMonth() + 1
    }/${date.getFullYear()}`;

    const html = `
      <div class="movements__row">
        <div class="movements__type movements__type--${type}">
          ${i + 1} ${type}
        </div>
        <div class="movements__date">${displayDate}</div>
        <div class="movements__value">${mov}GNF</div>
      </div>
    `;

    containerMovements.insertAdjacentHTML('afterbegin', html);
  });
};

// Variable pour suivre l'√©tat de tri
let sorted = false;

// Gestionnaire d'√©v√©nements pour le tri des mouvements
btnSort.addEventListener('click', function (e) {
  e.preventDefault();
  // Inverser l'√©tat de tri
  displayMovements(
    currentAccount.movements,
    currentAccount.mouvementsDates,
    !sorted
  );
  sorted = !sorted;
});

// Fonction pour calculer et afficher le solde total
const calcDisplayBalance = function (acc) {
  // Utilisation de reduce() pour calculer le solde
  acc.balance = acc.movements.reduce((acc, mov) => acc + mov, 0);
  // Affichage du solde dans l'√©l√©ment labelBalance
  labelBalance.textContent = `${acc.balance}‚Ç¨`;
};

// Fonction pour calculer et afficher le r√©sum√© des transactions
const calcDisplaySummary = function (acc) {
  // Calcul des entr√©es (d√©p√¥ts)
  const incomes = acc.movements
    .filter(mov => mov > 0) // Filtrer les d√©p√¥ts
    .reduce((acc, mov) => acc + mov, 0); // Additionner les d√©p√¥ts
  labelSumIn.textContent = `${incomes}‚Ç¨`;

  // Calcul des sorties (retraits)
  const out = acc.movements
    .filter(mov => mov < 0) // Filtrer les retraits
    .reduce((acc, mov) => acc + mov, 0); // Additionner les retraits
  labelSumOut.textContent = `${Math.abs(out)}‚Ç¨`; // Afficher les retraits en valeur absolue

  // Calcul des int√©r√™ts
  const interest = acc.movements
    .filter(mov => mov > 0) // Filtrer les d√©p√¥ts
    .map(deposit => (deposit * acc.interestRate) / 100) // Calculer les int√©r√™ts sur chaque d√©p√¥t
    .filter(int => int >= 1) // Ne conserver que les int√©r√™ts sup√©rieurs √† 1 euro
    .reduce((acc, int) => acc + int, 0); // Additionner les int√©r√™ts
  labelSumInterest.textContent = `${interest}‚Ç¨`;
};

let timer; // Variable pour stocker le compte √† rebours

// Fonction pour d√©marrer le compte √† rebours
const startLogoutTimer = function () {
  let time = 300; // Temps en secondes (5 minutes)

  // Fonction qui d√©cr√©mente le temps et met √† jour l'affichage du timer
  const tick = function () {
    const min = String(Math.trunc(time / 60)).padStart(2, '0');
    const sec = String(time % 60).padStart(2, '0');

    // Afficher le temps restant dans l'interface
    labelTimer.textContent = `${min}:${sec}`;

    // D√©connexion automatique lorsque le temps atteint z√©ro
    if (time === 0) {
      clearInterval(timer);
      alert('Vous avez √©t√© d√©connect√©(e) pour cause d‚Äôinactivit√©.');

      // Masquer l'interface de l'application
      containerApp.style.opacity = 0;

      // R√©initialiser les champs
      inputLoginUsername.value = inputLoginPin.value = '';
    }

    // D√©cr√©menter le temps
    time--;
  };

  // Ex√©cuter la fonction tick toutes les secondes
  tick(); // Appeler imm√©diatement pour afficher la premi√®re mise √† jour
  timer = setInterval(tick, 1000); // Appeler tick toutes les 1 seconde
};
